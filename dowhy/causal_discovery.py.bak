# This is a sample Python script.

import csv
import sys
import pandas as pd
import networkx as nx
import cdt
# Algorithm for ugraph recovery.
from cdt.independence.graph import ARD
from cdt.independence.graph import DecisionTreeRegression
from cdt.independence.graph import Glasso
from cdt.independence.graph import LinearSVRL2

# Pairwise Causality algorithm
from cdt.causality.pairwise import ANM
from cdt.causality.pairwise import BivariateFit
from cdt.causality.pairwise import CDS
from cdt.causality.pairwise import IGCI
from cdt.causality.pairwise import RECI

# Graph based Causality Algorithms
from cdt.causality.graph import GES
from cdt.causality.graph import GIES
from cdt.causality.graph import LiNGAM
from cdt.causality.graph import PC


# cdt logging setup

def recoverSkeletton(data, graph_recovery):
    if (graph_recovery == "ARD"):
        return ARD().predict(data)
    elif (graph_recovery == "DecisionTreeRegression"):
        return DecisionTreeRegression().predict(data)
    elif (graph_recovery == "Glasso"):
        return cdt.utils.graph.remove_indirect_links(Glasso().predict(data), alg='aracne')
    elif (graph_recovery == "LinearSVRL2"):
        return LinearSVRL2().predict(data)
    else:
        return "Error: Skeletton Recovery Algorithm failed."


def processCausalDiscovery(data, ugraph, alg, dataType, useGraph):
    if (alg == "ANM"):
        return ANM().orient_graph(data, nx.DiGraph(ugraph))
    elif (alg == "BivariateFit"):
        return BivariateFit().orient_graph(data, nx.Graph(ugraph))
    elif (alg == "CDS"):
        return CDS().orient_graph(data, nx.Graph(ugraph))
    elif (alg == "IGCI"):
        return IGCI().orient_graph(data, nx.Graph(ugraph))
    elif (alg == "RECI"):
        return RECI().orient_graph(data, nx.Graph(ugraph))
    elif (alg == "GES"):
        if (dataType == 'Continious'):
            ges_algorithm = GES(score='obs')
            return ges_algorithm.predict(data, nx.Graph(ugraph))
        if (dataType == 'Categorical'):
            ges_algorithm = GES(score='int')
            return ges_algorithm.predict(data, nx.Graph(ugraph))
    elif (alg == "GIES"):
        if (dataType == 'Continious'):
            gies_algorithm = GIES(score='obs')
            return gies_algorithm.predict(data, nx.Graph(ugraph))
        if (dataType == 'Categorical'):
            gies_algorithm = GIES(score='int')
            return gies_algorithm.predict(data, nx.Graph(ugraph))
    elif (alg == "LiNGAM"):
        return LiNGAM().predict(data)
    elif (alg == "PC"):
        pc_algorithm = PC()
        if (useGraph):
            return pc_algorithm.predict(data)
        else:
            return pc_algorithm.predict(data, nx.Graph(ugraph))


def testSkeletonRecovery(data, graph_recovery, causal_discovery, dataType, useGraph):
    graphs = {}
    for alg in graph_recovery:
        ugraph = ""
        if not useGraph:
            ugraph = recoverSkeletton(data, alg)
            ugraph = cdt.utils.graph.remove_indirect_links(ugraph, alg='aracne')
        graphs = {}
        graphs = testCausalDiscovery(data, ugraph, causal_discovery, alg, graphs, dataType, useGraph)
    return graphs


def testCausalDiscovery(data, ugraph, causal_discovery, skelteon_recovery, graphs, dataType, useGraph):
    for alg in causal_discovery:
        output = processCausalDiscovery(data, ugraph, alg, dataType, useGraph)
        graphs[skelteon_recovery + "_" + alg] = output
    return graphs


if __name__ == '__main__':
    cdt.SETTINGS.GPU = True
    cdt.SETTINGS.NJOBS = 3

    path = sys.argv[3]
    delimiter = sys.argv[4]
    graph_recovery = [sys.argv[1]]
    causal_discovery = [sys.argv[2]]
    dataType = ""
    useGraph = False

    if causal_discovery[0] == 'PC':
        useGraph = sys.argv[6]
        
    if causal_discovery[0] == 'GES' or causal_discovery[0] == 'GIES':
        dataType = sys.argv[5]

    data = pd.read_csv(path, sep=delimiter)
    graphs = testSkeletonRecovery(data, graph_recovery, causal_discovery, dataType, useGraph)
    ##pares Result
    result = "__RESULT__\n"
    for entry in graphs:
        node_id = 0
        for edge in graphs[entry].edges():
            result = result + str(edge[0]) + "->->->" + str(edge[1]) + "\n"
    print(result)

# See PyCharm help at https://www.jetbrains.com/help/pycharm/

